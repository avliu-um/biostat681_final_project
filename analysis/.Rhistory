y = rep(0, n)
y[A == 0] = y_0_complete[A == 0]
y[A == 1] = y_1_complete[A == 1]
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 100)
blr$Y1[, A == 1]
dim(blr$Y1[, A == 1])
sum(blr$Y1[, A == 1])
sum(blr$Y1[, A == 0])
y[A==1]
A
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis")
p = 3
n = 1000
beta_0 = runif(p, 0, 1.5)
beta_1 = runif(p, -1.5, 0)
A = sample(c(0, 1), n, replace = T)
n_0 = sum(A == 0)
n_1 = sum(A == 1)
X = matrix(0, nrow = n, ncol = p - 1)
X[A == 0, ] = rnorm(n_0 * (p - 1), mean = -1)
X[A == 1, ] = rnorm(n_1 * (p - 1), mean = 1)
X_augmented = cbind(1, X)
p_0 = 1 / (1 + exp(- X_augmented %*% beta_0))
p_1 = 1 / (1 + exp(- X_augmented %*% beta_1))
y_0_complete = rbinom(n = n, size = 1, prob = p_0)
y_1_complete = rbinom(n = n, size = 1, prob = p_1)
y = rep(0, n)
y[A == 0] = y_0_complete[A == 0]
y[A == 1] = y_1_complete[A == 1]
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 100)
sum(treatment_indicator)
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis")
p = 3
n = 1000
beta_0 = runif(p, 0, 1.5)
beta_1 = runif(p, -1.5, 0)
A = sample(c(0, 1), n, replace = T)
n_0 = sum(A == 0)
n_1 = sum(A == 1)
X = matrix(0, nrow = n, ncol = p - 1)
X[A == 0, ] = rnorm(n_0 * (p - 1), mean = -1)
X[A == 1, ] = rnorm(n_1 * (p - 1), mean = 1)
X_augmented = cbind(1, X)
p_0 = 1 / (1 + exp(- X_augmented %*% beta_0))
p_1 = 1 / (1 + exp(- X_augmented %*% beta_1))
y_0_complete = rbinom(n = n, size = 1, prob = p_0)
y_1_complete = rbinom(n = n, size = 1, prob = p_1)
y = rep(0, n)
y[A == 0] = y_0_complete[A == 0]
y[A == 1] = y_1_complete[A == 1]
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 100)
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis")
p = 3
n = 1000
beta_0 = runif(p, 0, 1.5)
beta_1 = runif(p, -1.5, 0)
A = sample(c(0, 1), n, replace = T)
n_0 = sum(A == 0)
n_1 = sum(A == 1)
X = matrix(0, nrow = n, ncol = p - 1)
X[A == 0, ] = rnorm(n_0 * (p - 1), mean = -1)
X[A == 1, ] = rnorm(n_1 * (p - 1), mean = 1)
X_augmented = cbind(1, X)
p_0 = 1 / (1 + exp(- X_augmented %*% beta_0))
p_1 = 1 / (1 + exp(- X_augmented %*% beta_1))
y_0_complete = rbinom(n = n, size = 1, prob = p_0)
y_1_complete = rbinom(n = n, size = 1, prob = p_1)
y = rep(0, n)
y[A == 0] = y_0_complete[A == 0]
y[A == 1] = y_1_complete[A == 1]
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 100)
mean(y_1_complete - y_0_complete)
hist(blr$tau_p_samples)
mean(blr$tau_p_samples)
beta_0
colMeans(blr$beta_0_samples)
p_0_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_0_samples)))
beta_1
colMeans(blr$beta_1_samples)
p_1_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_1_samples)))
plot(p_0, p_0_est)
plot(p_1, p_1_est)
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis")
p = 5
n = 1000
beta_0 = runif(p, 0, 1.5)
beta_1 = runif(p, -1.5, 0)
A = sample(c(0, 1), n, replace = T)
n_0 = sum(A == 0)
n_1 = sum(A == 1)
X = matrix(0, nrow = n, ncol = p - 1)
X[A == 0, ] = rnorm(n_0 * (p - 1), mean = -1)
X[A == 1, ] = rnorm(n_1 * (p - 1), mean = 1)
X_augmented = cbind(1, X)
p_0 = 1 / (1 + exp(- X_augmented %*% beta_0))
p_1 = 1 / (1 + exp(- X_augmented %*% beta_1))
y_0_complete = rbinom(n = n, size = 1, prob = p_0)
y_1_complete = rbinom(n = n, size = 1, prob = p_1)
y = rep(0, n)
y[A == 0] = y_0_complete[A == 0]
y[A == 1] = y_1_complete[A == 1]
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 1000)
mean(y_1_complete - y_0_complete)
hist(blr$tau_p_samples)
mean(blr$tau_p_samples)
beta_0
colMeans(blr$beta_0_samples)
p_0_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_0_samples)))
beta_1
colMeans(blr$beta_1_samples)
p_1_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_1_samples)))
plot(p_0, p_0_est)
plot(p_1, p_1_est)
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis")
p = 5
n = 500
beta_0 = runif(p, -0.5, 1.5)
beta_1 = runif(p, -1.5, 0.5)
A = sample(c(0, 1), n, replace = T)
n_0 = sum(A == 0)
n_1 = sum(A == 1)
X = matrix(0, nrow = n, ncol = p - 1)
X[A == 0, ] = rnorm(n_0 * (p - 1), mean = -0.2)
X[A == 1, ] = rnorm(n_1 * (p - 1), mean = 0.2)
X_augmented = cbind(1, X)
p_0 = 1 / (1 + exp(- X_augmented %*% beta_0))
p_1 = 1 / (1 + exp(- X_augmented %*% beta_1))
y_0_complete = rbinom(n = n, size = 1, prob = p_0)
y_1_complete = rbinom(n = n, size = 1, prob = p_1)
y = rep(0, n)
y[A == 0] = y_0_complete[A == 0]
y[A == 1] = y_1_complete[A == 1]
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 1000)
mean(y_1_complete - y_0_complete)
hist(blr$tau_p_samples)
mean(blr$tau_p_samples)
beta_0
colMeans(blr$beta_0_samples)
p_0_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_0_samples)))
beta_1
colMeans(blr$beta_1_samples)
p_1_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_1_samples)))
plot(p_0, p_0_est)
plot(p_1, p_1_est)
library(Rcpp)
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis")
p = 5
n = 500
beta_0 = runif(p, -0.5, 1.5)
beta_1 = runif(p, -1.5, 0.5)
A = sample(c(0, 1), n, replace = T)
n_0 = sum(A == 0)
n_1 = sum(A == 1)
X = matrix(0, nrow = n, ncol = p - 1)
X[A == 0, ] = rnorm(n_0 * (p - 1), mean = -0.2)
X[A == 1, ] = rnorm(n_1 * (p - 1), mean = 0.2)
X_augmented = cbind(1, X)
p_0 = 1 / (1 + exp(- X_augmented %*% beta_0))
p_1 = 1 / (1 + exp(- X_augmented %*% beta_1))
y_0_complete = rbinom(n = n, size = 1, prob = p_0)
y_1_complete = rbinom(n = n, size = 1, prob = p_1)
y = rep(0, n)
y[A == 0] = y_0_complete[A == 0]
y[A == 1] = y_1_complete[A == 1]
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 1000)
mean(y_1_complete - y_0_complete)
hist(blr$tau_p_samples)
mean(blr$tau_p_samples)
beta_0
colMeans(blr$beta_0_samples)
p_0_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_0_samples)))
beta_1
colMeans(blr$beta_1_samples)
p_1_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_1_samples)))
plot(p_0, p_0_est)
plot(p_1, p_1_est)
plot(p_0, p_0_est)
plot(p_1, p_1_est)
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis")
p = 5
n = 10000
beta_0 = runif(p, -0.5, 1.5)
beta_1 = runif(p, -1.5, 0.5)
A = sample(c(0, 1), n, replace = T)
n_0 = sum(A == 0)
n_1 = sum(A == 1)
X = matrix(0, nrow = n, ncol = p - 1)
X[A == 0, ] = rnorm(n_0 * (p - 1), mean = -0.2)
X[A == 1, ] = rnorm(n_1 * (p - 1), mean = 0.2)
X_augmented = cbind(1, X)
p_0 = 1 / (1 + exp(- X_augmented %*% beta_0))
p_1 = 1 / (1 + exp(- X_augmented %*% beta_1))
y_0_complete = rbinom(n = n, size = 1, prob = p_0)
y_1_complete = rbinom(n = n, size = 1, prob = p_1)
y = rep(0, n)
y[A == 0] = y_0_complete[A == 0]
y[A == 1] = y_1_complete[A == 1]
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 1000)
sourceCpp("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis/helper.cpp")
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis")
p = 5
n = 500
beta_0 = runif(p, -0.5, 1.5)
beta_1 = runif(p, -1.5, 0.5)
A = sample(c(0, 1), n, replace = T)
n_0 = sum(A == 0)
n_1 = sum(A == 1)
X = matrix(0, nrow = n, ncol = p - 1)
X[A == 0, ] = rnorm(n_0 * (p - 1), mean = -0.2)
X[A == 1, ] = rnorm(n_1 * (p - 1), mean = 0.2)
X_augmented = cbind(1, X)
p_0 = 1 / (1 + exp(- X_augmented %*% beta_0))
p_1 = 1 / (1 + exp(- X_augmented %*% beta_1))
y_0_complete = rbinom(n = n, size = 1, prob = p_0)
y_1_complete = rbinom(n = n, size = 1, prob = p_1)
y = rep(0, n)
y[A == 0] = y_0_complete[A == 0]
y[A == 1] = y_1_complete[A == 1]
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 1000)
mean(y_1_complete - y_0_complete)
hist(blr$tau_p_samples)
mean(blr$tau_p_samples)
beta_0
colMeans(blr$beta_0_samples)
p_0_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_0_samples)))
beta_1
colMeans(blr$beta_1_samples)
p_1_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_1_samples)))
plot(p_0, p_0_est)
plot(p_1, p_1_est)
source("bayesian_logistic_regression_for_causal_inference_cpp.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression_cpp(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 1000)
sourceCpp("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis/helper.cpp")
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis")
p = 5
n = 500
beta_0 = runif(p, -0.5, 1.5)
beta_1 = runif(p, -1.5, 0.5)
A = sample(c(0, 1), n, replace = T)
n_0 = sum(A == 0)
n_1 = sum(A == 1)
X = matrix(0, nrow = n, ncol = p - 1)
X[A == 0, ] = rnorm(n_0 * (p - 1), mean = -0.2)
X[A == 1, ] = rnorm(n_1 * (p - 1), mean = 0.2)
X_augmented = cbind(1, X)
p_0 = 1 / (1 + exp(- X_augmented %*% beta_0))
p_1 = 1 / (1 + exp(- X_augmented %*% beta_1))
y_0_complete = rbinom(n = n, size = 1, prob = p_0)
y_1_complete = rbinom(n = n, size = 1, prob = p_1)
y = rep(0, n)
y[A == 0] = y_0_complete[A == 0]
y[A == 1] = y_1_complete[A == 1]
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 1000)
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis")
p = 5
n = 500
beta_0 = runif(p, -0.5, 1.5)
beta_1 = runif(p, -1.5, 0.5)
A = sample(c(0, 1), n, replace = T)
n_0 = sum(A == 0)
n_1 = sum(A == 1)
X = matrix(0, nrow = n, ncol = p - 1)
X[A == 0, ] = rnorm(n_0 * (p - 1), mean = -0.2)
X[A == 1, ] = rnorm(n_1 * (p - 1), mean = 0.2)
X_augmented = cbind(1, X)
p_0 = 1 / (1 + exp(- X_augmented %*% beta_0))
p_1 = 1 / (1 + exp(- X_augmented %*% beta_1))
y_0_complete = rbinom(n = n, size = 1, prob = p_0)
y_1_complete = rbinom(n = n, size = 1, prob = p_1)
y = rep(0, n)
y[A == 0] = y_0_complete[A == 0]
y[A == 1] = y_1_complete[A == 1]
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 1000)
mean(y_1_complete - y_0_complete)
hist(blr$tau_p_samples)
mean(blr$tau_p_samples)
beta_0
colMeans(blr$beta_0_samples)
p_0_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_0_samples)))
beta_1
colMeans(blr$beta_1_samples)
p_1_est = 1 / (1 + exp(- X_augmented %*% colMeans(blr$beta_1_samples)))
plot(p_0, p_0_est)
plot(p_1, p_1_est)
games = read.csv("games_200_22_clean.csv")
games = games[, -1]
games$medium = factor(games$medium)
games$time_control = relevel(factor(games$time_control), ref = "standard")
games$home_country_diff = relevel(factor(games$home_country_diff), ref = "0")
games$players_sex = relevel(factor(games$players_sex), ref = "MM")
cleaned_games = model.matrix(~ . - 1, data = games)
cleaned_games = cleaned_games[, -1]
cleaned_games = as.data.frame(cleaned_games)
A = cleaned_games$mediumonline
X = as.matrix(cleaned_games[, 2:10])
X[, c("age_diff", "rating_diff")] = scale(X[, c("age_diff", "rating_diff")])
y = cleaned_games$upset
###############################################################################
# Bayesian logistic regression
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 10000)
hist(blr$tau_p_samples[5001:1000])
quantile(blr$tau_p_samples[5001:10000], c(0.025, 0.975))
beta_0 = colMeans(blr$beta_0_samples)
beta_1 = colMeans(blr$beta_1_samples)
hist(1 / (1 + exp(-cbind(1, X) %*% beta_0)))
hist(1 / (1 + exp(-cbind(1, X) %*% beta_1)))
hist(1 / (1 + exp(-cbind(1, X) %*% beta_0)))
hist(1 / (1 + exp(-cbind(1, X) %*% beta_1)))
###############################################################################
games = read.csv("games_200_22_complete_clean.csv")
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project")
setwd("~/Library/CloudStorage/OneDrive-Umich/Assignments/BIOSTAT 681/project/biostat681_final_project/analysis")
###############################################################################
games = read.csv("games_200_22_complete_clean.csv")
colnames(games)
games[1:5, ]
###############################################################################
# Bayesian logistic regression
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
################################################################################
games = read.csv("games_200_22_complete_clean.csv")
games = games[, -1]
colnames(games)
hist(games$n_tour_diff)
hist(games$n_game_diff)
hist(games$score_diff)
hist(games$n_games_higher)
hist(games$n_upset_higher)
games = read.csv("games_200_22_complete_clean.csv")
games = games[, -1]
games$medium = factor(games$medium)
games$time_control = relevel(factor(games$time_control), ref = "standard")
games$home_country_diff = relevel(factor(games$home_country_diff), ref = "0")
games$players_sex = relevel(factor(games$players_sex), ref = "MM")
games$first_game_diff = relevel(factor(games$first_game_diff), ref = "0")
cleaned_games = model.matrix(~ . - 1, data = games)
cleaned_games = cleaned_games[, -1]
cleaned_games = as.data.frame(cleaned_games)
A = cleaned_games$mediumonline
X = as.matrix(cleaned_games[, 2:10])
X[, c("age_diff", "rating_diff", "n_tour_diff", "n_game_diff", "score_diff", "n_games_higher", "n_upset_higher", "n_peo", "n_upset_peo")] =
scale(X[, c("age_diff", "rating_diff", "n_tour_diff", "n_game_diff", "score_diff", "n_games_higer", "n_upset_higher", "n_peo", "n_upset_peo")])
y = cleaned_games$upset
games = read.csv("games_200_22_complete_clean.csv")
games = games[, -1]
games$medium = factor(games$medium)
games$time_control = relevel(factor(games$time_control), ref = "standard")
games$home_country_diff = relevel(factor(games$home_country_diff), ref = "0")
games$players_sex = relevel(factor(games$players_sex), ref = "MM")
games$first_game_diff = relevel(factor(games$first_game_diff), ref = "0")
cleaned_games = model.matrix(~ . - 1, data = games)
cleaned_games = cleaned_games[, -1]
cleaned_games = as.data.frame(cleaned_games)
A = cleaned_games$mediumonline
cleaned_games
colnames(cleaned_games)
games = read.csv("games_200_22_complete_clean.csv")
games = games[, -1]
games$medium = factor(games$medium)
games$time_control = relevel(factor(games$time_control), ref = "standard")
games$home_country_diff = relevel(factor(games$home_country_diff), ref = "0")
games$players_sex = relevel(factor(games$players_sex), ref = "MM")
games$first_game_diff = relevel(factor(games$first_game_diff), ref = "0")
cleaned_games = model.matrix(~ . - 1, data = games)
cleaned_games = cleaned_games[, -1]
cleaned_games = as.data.frame(cleaned_games)
A = cleaned_games$mediumonline
X = as.matrix(cleaned_games[, 2:19])
X[, c("age_diff", "rating_diff", "n_tour_diff", "n_game_diff", "score_diff", "n_games_higher", "n_upset_higher", "n_peo", "n_upset_peo")] =
scale(X[, c("age_diff", "rating_diff", "n_tour_diff", "n_game_diff", "score_diff", "n_games_higer", "n_upset_higher", "n_peo", "n_upset_peo")])
y = cleaned_games$upset
colnames(cleaned_games[, 2:19])
colnames(X)
c("age_diff", "rating_diff", "n_tour_diff", "n_game_diff", "score_diff", "n_games_higher", "n_upset_higher", "n_peo", "n_upset_peo") %in% colnames(X)
games = read.csv("games_200_22_complete_clean.csv")
games = games[, -1]
games$medium = factor(games$medium)
games$time_control = relevel(factor(games$time_control), ref = "standard")
games$home_country_diff = relevel(factor(games$home_country_diff), ref = "0")
games$players_sex = relevel(factor(games$players_sex), ref = "MM")
games$first_game_diff = relevel(factor(games$first_game_diff), ref = "0")
cleaned_games = model.matrix(~ . - 1, data = games)
cleaned_games = cleaned_games[, -1]
cleaned_games = as.data.frame(cleaned_games)
A = cleaned_games$mediumonline
X = as.matrix(cleaned_games[, 2:19])
X[, c("age_diff", "rating_diff", "n_tour_diff", "n_game_diff", "score_diff", "n_games_higher", "n_upset_higher", "n_peo", "n_upset_peo")] =
scale(X[, c("age_diff", "rating_diff", "n_tour_diff", "n_game_diff", "score_diff", "n_games_higher", "n_upset_higher", "n_peo", "n_upset_peo")])
y = cleaned_games$upset
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 10000)
hist(blr$tau_p_samples[5001:1000])
quantile(blr$tau_p_samples[5001:10000], c(0.025, 0.975))
save(blr, "blr.rdata")
save(blr, file = "blr.rdata")
table(games$home_country_diff)
plot(games$home_country_diff, games$upset)
plot(as.numeric(games$home_country_diff), games$upset)
table(as.numeric(games$home_country_diff), games$upset)
as.numeric(games$home_country_diff)
games$home_country_diff
games = read.csv("games_200_22_complete_clean.csv")
games = games[, -1]
hcd = as.numeric(games$home_country_diff)
upset = games$upset
table(hcd, upset)
table(hcd, upset) / rowMeans(tables)
table(hcd, upset) / rowMeans(table(hcd, upset))
table(hcd, upset)
table(hcd, upset) / rowMeans(table(hcd, upset))
table(hcd, upset) / rowSumss(table(hcd, upset))
table(hcd, upset) / rowSums(table(hcd, upset))
table(hcd, upset)
table(hcd, upset) / rowSums(table(hcd, upset))
View(blr)
plot(blr$tau_p_samples)
plot(blr$tau_p_samples, type = "l")
plot(blr$tau_p_samples[5001:10000], type = "l")
acf(blr$tau_p_samples[5001:10000])
acf(blr$tau_p_samples[8001:10000])
acf(blr$tau_p_samples[9001:10000])
acf(blr$sigma_samples[5001:10000, 1])
acf(blr$sigma_samples[5001:10000, 2])
plot(blr$sigma_samples[, 1], type = "l")
plot(blr$sigma_samples[5001:10000, 1], type = "l")
plot(blr$sigma_samples[5001:10000, 2], type = "l")
plot(blr$beta_0_samples[5001:10000, 1], type = "l")
acf(blr$beta_0_samples[5001:10000, 1])
acf(blr$beta_0_samples[5001:10000, 2])
acf(blr$beta_0_samples[5001:10000, 3])
acf(blr$beta_0_samples[5001:10000, 4])
games = read.csv("games_200_22_complete_clean.csv")
games = games[, -1]
games$medium = factor(games$medium)
games$time_control = relevel(factor(games$time_control), ref = "standard")
games$home_country_diff = relevel(factor(games$home_country_diff), ref = "0")
games$players_sex = relevel(factor(games$players_sex), ref = "MM")
games$first_game_diff = relevel(factor(games$first_game_diff), ref = "0")
cleaned_games = model.matrix(~ . - 1, data = games)
cleaned_games = cleaned_games[, -1]
cleaned_games = as.data.frame(cleaned_games)
A = cleaned_games$mediumonline
X = as.matrix(cleaned_games[, 2:19])
X[, c("age_diff", "rating_diff", "n_tour_diff", "n_game_diff", "score_diff", "n_games_higher", "n_upset_higher", "n_peo", "n_upset_peo")] =
scale(X[, c("age_diff", "rating_diff", "n_tour_diff", "n_game_diff", "score_diff", "n_games_higher", "n_upset_higher", "n_peo", "n_upset_peo")])
y = cleaned_games$upset
source("bayesian_logistic_regression_for_causal_inference.R")
set.seed(2022)
blr = bayesian_causal_inference_logistic_regression(X, y, A,
a_0 = 1, b_0 = 1, a_1 = 1, b_1 = 1,
total_steps = 50000)
hist(blr$tau_p_samples[5001:1000])
quantile(blr$tau_p_samples[5001:10000], c(0.025, 0.975))
hist(blr$tau_p_samples[40001:50000])
quantile(blr$tau_p_samples[40001:50000], c(0.025, 0.975))
save(blr, file = "blr.rdata")
acf(blr$tau_p_samples)
